{"ast":null,"code":"var _jsxFileName = \"/home/husam/movies/src/componenets/Card/Card.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport DotButton from 'componenets/DotsButton/DotButton';\nimport HiddenMenu from 'componenets/HiddenMenu/HiddenMenu';\nimport UrlContext from 'componenets/store/url-context';\nimport { CardDiv, CardImage, CardInfo, CardContainer, Title, ReleasedDate, OverView } from './styles';\nimport HttpRequest from '../service/http-request';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Card() {\n  _s();\n\n  let url = `https://api.themoviedb.org/3/movie/popular?api_key=3024cf700c94345aa84ec47dbf98f3a4&language=en-US&page=1`;\n  const [responseData, setResponseData] = useState([]);\n  const [isShown, setIsShown] = useState(false);\n  const sortedUrl = useContext(UrlContext);\n\n  const clickFun = () => {\n    setIsShown(!isShown);\n  };\n\n  if (sortedUrl.url !== '') {\n    url = sortedUrl.url;\n  }\n  /**\n   * Make get request.\n   *\n   * @param {string} url            Request URl.\n   * @param {Object} [headers=null] Object contains request headers.\n   *\n   * @return {Promise<Object>} Promise fulfilled with response data.\n   */\n\n\n  HttpRequest(url);\n  console.log(HttpRequest(url));\n  setResponseData(); // useEffect(() => {\n  //   fetch(url, {\n  //     method: 'get',\n  //     dataType: 'json',\n  //     headers: { 'Content-Type': 'application/json' },\n  //   })\n  //     .then((result) => result.json())\n  //     .then((result) => result.results)\n  //     .then((result) => {\n  //       setResponseData(result);\n  //       return responseData;\n  //     });\n  // }, [url]);\n\n  return /*#__PURE__*/_jsxDEV(CardContainer, {\n    children: responseData.map(item => /*#__PURE__*/_jsxDEV(CardDiv, {\n      children: [/*#__PURE__*/_jsxDEV(CardImage, {\n        img: `https://image.tmdb.org/t/p/w500${item.poster_path}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DotButton, {\n        onClick: clickFun\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardInfo, {\n        children: [/*#__PURE__*/_jsxDEV(Title, {\n          children: item.original_title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ReleasedDate, {\n          children: item.release_date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(OverView, {\n          children: item.overview\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(HiddenMenu, {\n        isClicked: isShown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Card, \"1beGtz8kZm6tlhBc7u46fDY+MQM=\");\n\n_c = Card;\nexport default Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"sources":["/home/husam/movies/src/componenets/Card/Card.jsx"],"names":["React","useContext","useEffect","useState","DotButton","HiddenMenu","UrlContext","CardDiv","CardImage","CardInfo","CardContainer","Title","ReleasedDate","OverView","HttpRequest","Card","url","responseData","setResponseData","isShown","setIsShown","sortedUrl","clickFun","console","log","map","item","poster_path","original_title","release_date","overview"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,OAAOC,UAAP,MAAuB,+BAAvB;AACA,SACEC,OADF,EAEEC,SAFF,EAGEC,QAHF,EAIEC,aAJF,EAKEC,KALF,EAMEC,YANF,EAOEC,QAPF,QAQO,UARP;AASA,OAAOC,WAAP,MAAwB,yBAAxB;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACd,MAAIC,GAAG,GAAI,2GAAX;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMkB,SAAS,GAAGpB,UAAU,CAACK,UAAD,CAA5B;;AAEA,QAAMgB,QAAQ,GAAG,MAAM;AACrBF,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAFD;;AAIA,MAAIE,SAAS,CAACL,GAAV,KAAkB,EAAtB,EAA0B;AACxBA,IAAAA,GAAG,GAAGK,SAAS,CAACL,GAAhB;AACD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEF,EAAAA,WAAW,CAACE,GAAD,CAAX;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYV,WAAW,CAACE,GAAD,CAAvB;AACAE,EAAAA,eAAe,GAvBD,CAwBd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE,QAAC,aAAD;AAAA,cACGD,YAAY,CAACQ,GAAb,CAAkBC,IAAD,iBAChB,QAAC,OAAD;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,GAAG,EAAG,kCAAiCA,IAAI,CAACC,WAAY;AAD1D;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,SAAD;AAAW,QAAA,OAAO,EAAEL;AAApB;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE,QAAC,QAAD;AAAA,gCACE,QAAC,KAAD;AAAA,oBAAQI,IAAI,CAACE;AAAb;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,YAAD;AAAA,oBAAeF,IAAI,CAACG;AAApB;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,QAAD;AAAA,oBAAWH,IAAI,CAACI;AAAhB;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAUE,QAAC,UAAD;AAAY,QAAA,SAAS,EAAEX;AAAvB;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAxDQJ,I;;KAAAA,I;AA0DT,eAAeA,IAAf","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport DotButton from 'componenets/DotsButton/DotButton';\nimport HiddenMenu from 'componenets/HiddenMenu/HiddenMenu';\nimport UrlContext from 'componenets/store/url-context';\nimport {\n  CardDiv,\n  CardImage,\n  CardInfo,\n  CardContainer,\n  Title,\n  ReleasedDate,\n  OverView,\n} from './styles';\nimport HttpRequest from '../service/http-request';\n\nfunction Card() {\n  let url = `https://api.themoviedb.org/3/movie/popular?api_key=3024cf700c94345aa84ec47dbf98f3a4&language=en-US&page=1`;\n  const [responseData, setResponseData] = useState([]);\n  const [isShown, setIsShown] = useState(false);\n  const sortedUrl = useContext(UrlContext);\n\n  const clickFun = () => {\n    setIsShown(!isShown);\n  };\n\n  if (sortedUrl.url !== '') {\n    url = sortedUrl.url;\n  }\n  /**\n   * Make get request.\n   *\n   * @param {string} url            Request URl.\n   * @param {Object} [headers=null] Object contains request headers.\n   *\n   * @return {Promise<Object>} Promise fulfilled with response data.\n   */\n  HttpRequest(url);\n  console.log(HttpRequest(url));\n  setResponseData()\n  // useEffect(() => {\n  //   fetch(url, {\n  //     method: 'get',\n  //     dataType: 'json',\n  //     headers: { 'Content-Type': 'application/json' },\n  //   })\n  //     .then((result) => result.json())\n  //     .then((result) => result.results)\n  //     .then((result) => {\n  //       setResponseData(result);\n  //       return responseData;\n  //     });\n  // }, [url]);\n\n  return (\n    <CardContainer>\n      {responseData.map((item) => (\n        <CardDiv>\n          <CardImage\n            img={`https://image.tmdb.org/t/p/w500${item.poster_path}`}\n          />\n          <DotButton onClick={clickFun} />\n          <CardInfo>\n            <Title>{item.original_title}</Title>\n            <ReleasedDate>{item.release_date}</ReleasedDate>\n            <OverView>{item.overview}</OverView>\n          </CardInfo>\n          <HiddenMenu isClicked={isShown} />\n        </CardDiv>\n      ))}\n    </CardContainer>\n  );\n}\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}